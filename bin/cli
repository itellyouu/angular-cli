#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const child_process = require('child_process');

let this_dir = process.cwd();

fs.mkdirSync(process.argv[2])
copyFolderRecursiveSync(path.resolve(__dirname, '../src'), `${this_dir}/${process.argv[2]}/`)

copyFileSync(`${path.resolve(__dirname, '../.gitignore')}`, `${this_dir}/${process.argv[2]}/.gitignore`)
copyFileSync(`${path.resolve(__dirname, '../webpack.config.js')}`, `${this_dir}/${process.argv[2]}/webpack.config.js`)
copyFileSync(`${path.resolve(__dirname, '../webpack.dev.js')}`, `${this_dir}/${process.argv[2]}/webpack.dev.js`)

var json = fs.readFileSync(`${path.resolve(__dirname, '../package.json')}`).toString();
json = JSON.parse(json)
json.name = process.argv[2]
json.description = ""
json.author = ""

fs.writeFileSync(`${this_dir}/${process.argv[2]}/package.json`, JSON.stringify(json))

process.stdout.write(`npm install donwload...`)
var ln = child_process.exec(`cd ${process.argv[2]} && npm install`, function(err, stdout){
  if (err) throw new Error(err);
  console.log(stdout);
})

function copyFileSync(source, target) {

  var targetFile = target;

  //if target is a directory a new file with the same name will be created
  if (fs.existsSync(target)) {
    if (fs.lstatSync(target).isDirectory()) {
      targetFile = path.join(target, path.basename(source));
    }
  }

  fs.writeFileSync(targetFile, fs.readFileSync(source));
}


function copyFolderRecursiveSync(source, target) {
  var files = [];

  //check if folder needs to be created or integrated
  var targetFolder = path.join(target, path.basename(source));
  if (!fs.existsSync(targetFolder)) {
    fs.mkdirSync(targetFolder);
  }

  //copy
  if (fs.lstatSync(source).isDirectory()) {
    files = fs.readdirSync(source);
    files.forEach(function (file) {
      var curSource = path.join(source, file);
      if (fs.lstatSync(curSource).isDirectory()) {
        copyFolderRecursiveSync(curSource, targetFolder);
      } else {
        copyFileSync(curSource, targetFolder);
      }
    });
  }
}